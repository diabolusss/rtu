
ldx1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  000001a6  0000023a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001a6  00000000  00000000  00000094  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800100  00800100  0000023a  2**0
                  ALLOC
  3 .noinit       00000000  00800102  00800102  0000023a  2**0
                  CONTENTS
  4 .eeprom       00000000  00810000  00810000  0000023a  2**0
                  CONTENTS
  5 .stab         00000408  00000000  00000000  0000023c  2**2
                  CONTENTS, READONLY, DEBUGGING
  6 .stabstr      00000084  00000000  00000000  00000644  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_aranges 00000014  00000000  00000000  000006c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 00000054  00000000  00000000  000006dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00000116  00000000  00000000  00000730  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000008c  00000000  00000000  00000846  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000010b  00000000  00000000  000008d2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    000000c0  00000000  00000000  000009dd  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c <__ctors_end>
   4:	0c 94 63 00 	jmp	0xc6 <__bad_interrupt>
   8:	0c 94 63 00 	jmp	0xc6 <__bad_interrupt>
   c:	0c 94 63 00 	jmp	0xc6 <__bad_interrupt>
  10:	0c 94 63 00 	jmp	0xc6 <__bad_interrupt>
  14:	0c 94 63 00 	jmp	0xc6 <__bad_interrupt>
  18:	0c 94 63 00 	jmp	0xc6 <__bad_interrupt>
  1c:	0c 94 63 00 	jmp	0xc6 <__bad_interrupt>
  20:	0c 94 63 00 	jmp	0xc6 <__bad_interrupt>
  24:	0c 94 63 00 	jmp	0xc6 <__bad_interrupt>
  28:	0c 94 63 00 	jmp	0xc6 <__bad_interrupt>
  2c:	0c 94 63 00 	jmp	0xc6 <__bad_interrupt>
  30:	0c 94 63 00 	jmp	0xc6 <__bad_interrupt>
  34:	0c 94 63 00 	jmp	0xc6 <__bad_interrupt>
  38:	0c 94 7e 00 	jmp	0xfc <__vector_14>
  3c:	0c 94 63 00 	jmp	0xc6 <__bad_interrupt>
  40:	0c 94 63 00 	jmp	0xc6 <__bad_interrupt>
  44:	0c 94 63 00 	jmp	0xc6 <__bad_interrupt>
  48:	0c 94 63 00 	jmp	0xc6 <__bad_interrupt>
  4c:	0c 94 63 00 	jmp	0xc6 <__bad_interrupt>
  50:	0c 94 63 00 	jmp	0xc6 <__bad_interrupt>
  54:	0c 94 63 00 	jmp	0xc6 <__bad_interrupt>
  58:	0c 94 63 00 	jmp	0xc6 <__bad_interrupt>
  5c:	0c 94 63 00 	jmp	0xc6 <__bad_interrupt>
  60:	0c 94 63 00 	jmp	0xc6 <__bad_interrupt>
  64:	0c 94 63 00 	jmp	0xc6 <__bad_interrupt>
  68:	0c 94 63 00 	jmp	0xc6 <__bad_interrupt>
  6c:	0c 94 63 00 	jmp	0xc6 <__bad_interrupt>
  70:	0c 94 63 00 	jmp	0xc6 <__bad_interrupt>
  74:	0c 94 63 00 	jmp	0xc6 <__bad_interrupt>
  78:	0c 94 63 00 	jmp	0xc6 <__bad_interrupt>
  7c:	0c 94 63 00 	jmp	0xc6 <__bad_interrupt>
  80:	0c 94 63 00 	jmp	0xc6 <__bad_interrupt>
  84:	0c 94 63 00 	jmp	0xc6 <__bad_interrupt>
  88:	0c 94 63 00 	jmp	0xc6 <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e6 ea       	ldi	r30, 0xA6	; 166
  a0:	f1 e0       	ldi	r31, 0x01	; 1
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a0 30       	cpi	r26, 0x00	; 0
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	11 e0       	ldi	r17, 0x01	; 1
  b4:	a0 e0       	ldi	r26, 0x00	; 0
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a2 30       	cpi	r26, 0x02	; 2
  be:	b1 07       	cpc	r27, r17
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	0c 94 95 00 	jmp	0x12a <main>

000000c6 <__bad_interrupt>:
  c6:	0c 94 00 00 	jmp	0x0 <__vectors>

000000ca <port_init>:
#include <avr/interrupt.h>

/******************** Portu inicializ?cijas funkcija ******************/
void port_init(void){  
	DDRD  = 0x00; //visas porta D l?nijas uz IZvadi	
  ca:	11 ba       	out	0x11, r1	; 17
	//setting PWM-Ports as output
	DDRB = (1 << PB7) | (1 << PB6);
  cc:	80 ec       	ldi	r24, 0xC0	; 192
  ce:	87 bb       	out	0x17, r24	; 23
	
	sei(); 
  d0:	78 94       	sei
  d2:	08 95       	ret

000000d4 <init_devices>:
}

/******************** Rezimu[sakuma vertiibu] uzstadisana *************/
void init_devices(void){
	//16 bit timer1 setup
	//set to FAST PWM //set H on compare; non-inverting mode
	 TCCR1A |= (1 << WGM10) | (1 << COM1B1) | (1 << COM1C1);
  d4:	8f b5       	in	r24, 0x2f	; 47
  d6:	89 62       	ori	r24, 0x29	; 41
  d8:	8f bd       	out	0x2f, r24	; 47
	 TCCR1B |= (1 << WGM12) | (1 << CS11); //set prescaler 8
  da:	8e b5       	in	r24, 0x2e	; 46
  dc:	8a 60       	ori	r24, 0x0A	; 10
  de:	8e bd       	out	0x2e, r24	; 46
	 TIMSK |= (1 << TOIE1);
  e0:	87 b7       	in	r24, 0x37	; 55
  e2:	84 60       	ori	r24, 0x04	; 4
  e4:	87 bf       	out	0x37, r24	; 55

	 //set OCR  value
	 OCR1B = 120;	
  e6:	88 e7       	ldi	r24, 0x78	; 120
  e8:	90 e0       	ldi	r25, 0x00	; 0
  ea:	99 bd       	out	0x29, r25	; 41
  ec:	88 bd       	out	0x28, r24	; 40
	 OCR1C = 120;
  ee:	90 93 79 00 	sts	0x0079, r25
  f2:	80 93 78 00 	sts	0x0078, r24

	port_init();
  f6:	0e 94 65 00 	call	0xca <port_init>
  fa:	08 95       	ret

000000fc <__vector_14>:
}

/*****FUNCTION PROTOTYPES**********************************************/
/******************** Globalie mainigie********************************/

volatile uint16_t timer = 0;

/******************** Partraukumi *************************************/
//0.01(7) sek
ISR(TIMER1_OVF_vect){
  fc:	1f 92       	push	r1
  fe:	0f 92       	push	r0
 100:	0f b6       	in	r0, 0x3f	; 63
 102:	0f 92       	push	r0
 104:	11 24       	eor	r1, r1
 106:	8f 93       	push	r24
 108:	9f 93       	push	r25
	timer++;		
 10a:	80 91 00 01 	lds	r24, 0x0100
 10e:	90 91 01 01 	lds	r25, 0x0101
 112:	01 96       	adiw	r24, 0x01	; 1
 114:	90 93 01 01 	sts	0x0101, r25
 118:	80 93 00 01 	sts	0x0100, r24
 11c:	9f 91       	pop	r25
 11e:	8f 91       	pop	r24
 120:	0f 90       	pop	r0
 122:	0f be       	out	0x3f, r0	; 63
 124:	0f 90       	pop	r0
 126:	1f 90       	pop	r1
 128:	18 95       	reti

0000012a <main>:
}

//ISR(TIMER1_COMPB_vect){
	//dirb == 1 ? (dirb = 0, kb = -1): (dirb = 1, kb = 1);
//}

//ISR(TIMER1_COMPC_vect){
	//dirc == 1 ? (dirc = 0, kc = -1): (dirc = 1, kc = 1);
//}
/***************************** Main funkcija **************************/
int main (void){
 12a:	cf ef       	ldi	r28, 0xFF	; 255
 12c:	d0 e1       	ldi	r29, 0x10	; 16
 12e:	de bf       	out	0x3e, r29	; 62
 130:	cd bf       	out	0x3d, r28	; 61
	init_devices();	
 132:	0e 94 6a 00 	call	0xd4 <init_devices>
	uint8_t hb = OCR1B, hc = OCR1C, kb = 1, kc = -1;
 136:	88 b5       	in	r24, 0x28	; 40
 138:	99 b5       	in	r25, 0x29	; 41
 13a:	38 2f       	mov	r19, r24
 13c:	80 91 78 00 	lds	r24, 0x0078
 140:	90 91 79 00 	lds	r25, 0x0079
 144:	28 2f       	mov	r18, r24
 146:	41 e0       	ldi	r20, 0x01	; 1
 148:	5f ef       	ldi	r21, 0xFF	; 255
 14a:	75 e0       	ldi	r23, 0x05	; 5
 14c:	6f e0       	ldi	r22, 0x0F	; 15

	while (1){
		//palielinam pec 500*0.01(7)
		//up = 1; down = 0
		if(timer > 500){
 14e:	80 91 00 01 	lds	r24, 0x0100
 152:	90 91 01 01 	lds	r25, 0x0101
 156:	85 5f       	subi	r24, 0xF5	; 245
 158:	91 40       	sbci	r25, 0x01	; 1
 15a:	c8 f3       	brcs	.-14     	; 0x14e <main+0x24>
			hb += kb * 5;
 15c:	47 9f       	mul	r20, r23
 15e:	c0 01       	movw	r24, r0
 160:	11 24       	eor	r1, r1
 162:	38 0f       	add	r19, r24
			hc += kc * 15;
 164:	56 9f       	mul	r21, r22
 166:	c0 01       	movw	r24, r0
 168:	11 24       	eor	r1, r1
 16a:	28 0f       	add	r18, r24

			if (hb >= 255) kb = -1; else if (hb <= 0) kb = 1;
 16c:	3f 3f       	cpi	r19, 0xFF	; 255
 16e:	11 f4       	brne	.+4      	; 0x174 <main+0x4a>
 170:	43 2f       	mov	r20, r19
 172:	03 c0       	rjmp	.+6      	; 0x17a <main+0x50>
 174:	33 23       	and	r19, r19
 176:	09 f4       	brne	.+2      	; 0x17a <main+0x50>
 178:	41 e0       	ldi	r20, 0x01	; 1
			if (hc >= 255) kc = -1; else if (hc <= 0) kc = 1;
 17a:	2f 3f       	cpi	r18, 0xFF	; 255
 17c:	11 f4       	brne	.+4      	; 0x182 <main+0x58>
 17e:	52 2f       	mov	r21, r18
 180:	03 c0       	rjmp	.+6      	; 0x188 <main+0x5e>
 182:	22 23       	and	r18, r18
 184:	09 f4       	brne	.+2      	; 0x188 <main+0x5e>
 186:	51 e0       	ldi	r21, 0x01	; 1
					
					
			OCR1B = hb;
 188:	83 2f       	mov	r24, r19
 18a:	99 27       	eor	r25, r25
 18c:	99 bd       	out	0x29, r25	; 41
 18e:	88 bd       	out	0x28, r24	; 40
			OCR1C = hc;
 190:	82 2f       	mov	r24, r18
 192:	99 27       	eor	r25, r25
 194:	90 93 79 00 	sts	0x0079, r25
 198:	80 93 78 00 	sts	0x0078, r24
			timer = 0;
 19c:	10 92 01 01 	sts	0x0101, r1
 1a0:	10 92 00 01 	sts	0x0100, r1
 1a4:	d4 cf       	rjmp	.-88     	; 0x14e <main+0x24>
