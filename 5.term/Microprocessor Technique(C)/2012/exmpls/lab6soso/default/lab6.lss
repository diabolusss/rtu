
lab6.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000028  00800100  00000592  00000626  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000592  00000000  00000000  00000094  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000b  00800128  00800128  0000064e  2**0
                  ALLOC
  3 .noinit       00000000  00800133  00800133  0000064e  2**0
                  CONTENTS
  4 .eeprom       00000000  00810000  00810000  0000064e  2**0
                  CONTENTS
  5 .stab         00000408  00000000  00000000  00000650  2**2
                  CONTENTS, READONLY, DEBUGGING
  6 .stabstr      00000084  00000000  00000000  00000a58  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_aranges 00000014  00000000  00000000  00000adc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 00000125  00000000  00000000  00000af0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   000003b3  00000000  00000000  00000c15  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000012d  00000000  00000000  00000fc8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   000002cb  00000000  00000000  000010f5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    00000192  00000000  00000000  000013c0  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c <__ctors_end>
   4:	0c 94 63 00 	jmp	0xc6 <__bad_interrupt>
   8:	0c 94 63 00 	jmp	0xc6 <__bad_interrupt>
   c:	0c 94 63 00 	jmp	0xc6 <__bad_interrupt>
  10:	0c 94 63 00 	jmp	0xc6 <__bad_interrupt>
  14:	0c 94 63 00 	jmp	0xc6 <__bad_interrupt>
  18:	0c 94 63 00 	jmp	0xc6 <__bad_interrupt>
  1c:	0c 94 63 00 	jmp	0xc6 <__bad_interrupt>
  20:	0c 94 63 00 	jmp	0xc6 <__bad_interrupt>
  24:	0c 94 63 00 	jmp	0xc6 <__bad_interrupt>
  28:	0c 94 63 00 	jmp	0xc6 <__bad_interrupt>
  2c:	0c 94 63 00 	jmp	0xc6 <__bad_interrupt>
  30:	0c 94 63 00 	jmp	0xc6 <__bad_interrupt>
  34:	0c 94 63 00 	jmp	0xc6 <__bad_interrupt>
  38:	0c 94 63 00 	jmp	0xc6 <__bad_interrupt>
  3c:	0c 94 63 00 	jmp	0xc6 <__bad_interrupt>
  40:	0c 94 65 00 	jmp	0xca <__vector_16>
  44:	0c 94 63 00 	jmp	0xc6 <__bad_interrupt>
  48:	0c 94 e4 00 	jmp	0x1c8 <__vector_18>
  4c:	0c 94 5a 01 	jmp	0x2b4 <__vector_19>
  50:	0c 94 63 00 	jmp	0xc6 <__bad_interrupt>
  54:	0c 94 63 00 	jmp	0xc6 <__bad_interrupt>
  58:	0c 94 63 00 	jmp	0xc6 <__bad_interrupt>
  5c:	0c 94 63 00 	jmp	0xc6 <__bad_interrupt>
  60:	0c 94 63 00 	jmp	0xc6 <__bad_interrupt>
  64:	0c 94 63 00 	jmp	0xc6 <__bad_interrupt>
  68:	0c 94 63 00 	jmp	0xc6 <__bad_interrupt>
  6c:	0c 94 63 00 	jmp	0xc6 <__bad_interrupt>
  70:	0c 94 63 00 	jmp	0xc6 <__bad_interrupt>
  74:	0c 94 63 00 	jmp	0xc6 <__bad_interrupt>
  78:	0c 94 63 00 	jmp	0xc6 <__bad_interrupt>
  7c:	0c 94 63 00 	jmp	0xc6 <__bad_interrupt>
  80:	0c 94 63 00 	jmp	0xc6 <__bad_interrupt>
  84:	0c 94 63 00 	jmp	0xc6 <__bad_interrupt>
  88:	0c 94 63 00 	jmp	0xc6 <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e2 e9       	ldi	r30, 0x92	; 146
  a0:	f5 e0       	ldi	r31, 0x05	; 5
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a8 32       	cpi	r26, 0x28	; 40
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	11 e0       	ldi	r17, 0x01	; 1
  b4:	a8 e2       	ldi	r26, 0x28	; 40
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a3 33       	cpi	r26, 0x33	; 51
  be:	b1 07       	cpc	r27, r17
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	0c 94 f3 01 	jmp	0x3e6 <main>

000000c6 <__bad_interrupt>:
  c6:	0c 94 00 00 	jmp	0x0 <__vectors>

000000ca <__vector_16>:
	volatile unsigned char tx_complete = 1;
	volatile unsigned int rx_delay = 1;

/****** INTERRUPTS ****************************************************/
ISR(TIMER0_OVF_vect) {	    
  ca:	1f 92       	push	r1
  cc:	0f 92       	push	r0
  ce:	0f b6       	in	r0, 0x3f	; 63
  d0:	0f 92       	push	r0
  d2:	11 24       	eor	r1, r1
  d4:	8f 93       	push	r24
  d6:	9f 93       	push	r25
  d8:	af 93       	push	r26
  da:	bf 93       	push	r27
	timer+=255*128;
  dc:	80 91 28 01 	lds	r24, 0x0128
  e0:	90 91 29 01 	lds	r25, 0x0129
  e4:	a0 91 2a 01 	lds	r26, 0x012A
  e8:	b0 91 2b 01 	lds	r27, 0x012B
  ec:	80 58       	subi	r24, 0x80	; 128
  ee:	90 48       	sbci	r25, 0x80	; 128
  f0:	af 4f       	sbci	r26, 0xFF	; 255
  f2:	bf 4f       	sbci	r27, 0xFF	; 255
  f4:	80 93 28 01 	sts	0x0128, r24
  f8:	90 93 29 01 	sts	0x0129, r25
  fc:	a0 93 2a 01 	sts	0x012A, r26
 100:	b0 93 2b 01 	sts	0x012B, r27
 104:	bf 91       	pop	r27
 106:	af 91       	pop	r26
 108:	9f 91       	pop	r25
 10a:	8f 91       	pop	r24
 10c:	0f 90       	pop	r0
 10e:	0f be       	out	0x3f, r0	; 63
 110:	0f 90       	pop	r0
 112:	1f 90       	pop	r1
 114:	18 95       	reti

00000116 <USART_Receive>:
}

//receive complete
ISR(USART0_RX_vect){
	//save data to buffer		
	//*buffer.value = USART_Receive();
	unsigned char *tmp;
	*tmp = USART_Receive();

	cbWrite(&buffer, tmp);

	//set delay	
	if (cbIsFull(&buffer) == 1){

		rx_delay = (unsigned int) atoi (buffer.value);
		do{
			USART_Transmit(*buffer.value);
			buffer.value++;
			buffer.start = (buffer.start + 1) % buffer.size;

		}while(!cbIsEmpty(&buffer));
	}

	//echo received data
	//USART_Transmit(*buffer.value);

	//allow communicate
	tx_complete = 1;
}

//UDR empty
ISR(USART0_UDRE_vect){
	if (tx_complete == 1){
		ptr_object elem;

		elem.value = "\n\rSYN:CHAARONII TO YOUR SEVICE\n\r";
		elem.size = _strlen(elem.value);		

		do{
			USART_Transmit(*elem.value);				
			elem.size--;
			elem.value++;				
		}while(elem.size);

		elem.value = "SYN";
		elem.size = _strlen(elem.value);
		tx_complete = 0;
			
	}
}
/****** PROGRAMM BODY *************************************************/
int main(void){
	init_devices();

	//LEDs
	unsigned char port_data = 0x80;
	
	while(1){		
			
		/****** LEDs ******************/
		if(timer > (FOSC * (rx_delay)) ){
			port_data = _rotl(port_data,1);
			PORTD = ~port_data;
			timer = 0;
		}
			
				
	}	
	return 0;	
}
/****** END PROGRAMM BODY **********************************************/

/****** SYSTEM CONFIGURATION *******************************************/
void port_init(void){
	DDRD  = 0xFF; 	//port D o/p
	PORTD  = ~(0x00); //LEDs off
	
	sei();	//allow global interrupts
}

void init_devices(void){	

	/**** TIMER0 SETUP **********/
	TCCR0 = 0x05;	//F_CPU/32 11[off(0)/1/8/32/64/128/256/1024]
	TIMSK = 0x01;	//overflow enable
	TCNT0 = 0;		//set start value
	
	/**** USART0 SETUP **********/
	USART_Init(_UBRR);
	
	/**** WATCHDOG SETUP ********/	
	//COP_init();

	/**** PORT SETUP ************/
	port_init(); 
}

void USART_Init(unsigned int ubrr){
	/* Set baud rate */
	UBRR0H = (unsigned char)(ubrr >> 8);
	UBRR0L = (unsigned char)ubrr;

	/* Enable receiver and transmitter, complete interrupt enable */
	//UCSR0B = (1<<RXCIE0)|(1<<TXCIE0)|(1 << RXEN0)|(1 << TXEN0);
	UCSR0B = (1<<RXCIE0)|(1<<UDRIE0)|(1 << RXEN0)|(1 << TXEN0);	

	/* Set frame format: 8data, 2stop bit */
	UCSR0C = (1 << USBS) |(3 << UCSZ0);
	//set by def |(3 << UCSZ0);	!?????

	//MAX buffer size + one empty to avoid start == end
	buffer.size = 2 + 1;
	buffer.start = 0;
	buffer.end = 0;	
}

void COP_init(void){
	//initialize and set prescaller	
	#pragma optsize-	//lai nesacakaretu kodu atsledzam opt uz laiku
		//WDTCR =  (1 << WDE) | (1 << WDCE);	//watchdog change enable
		//WDTCR  = 1<<WDE | 1<<WDP2 | 1<<WDP1 | 1<<WDP0; // set  prescaler
		WDTCR = 0x1E;				//A watchdog timer (or computer operating properly (COP) timer) 
		WDTCR = 0x0E;				//WatchDog Enable[can be erased if WDCE=1] todo[disable]: 
		#ifdef _OPTIMIZE_SIZE_		//1)send 1 to both WDCE & WDE 2)in next 4 clocks send 0 to wde[2.lvl is secured against that]
			#pragma optsize+		//WDP2, WDP1, WDP0: Watchdog Timer Prescaler 2, 1, and 0
		#endif						//0 0 0 16K (16,384) 14.8 ms 14.0 ms
									//0 0 1 32K (32,768) 29.6 ms 28.1 ms
									//1 1 0 1,024K (1,048,576) 0.95 s 0.9 s
									//1 1 1 2,048K (2,097,152) 1.9 s 1.8 s
}

/****** IN PROGRAMM FUNCTIONS *****************************************/
void USART_Transmit( unsigned char data ){
	/* Wait for empty transmit buffer (UDRE is set)*/
	while ( !( UCSR0A & (1<<UDRE)) );

	/* Put data into buffer, sends the data */
	UDR0 = data;
}

unsigned char USART_Receive( void ){
	/* Wait for data to be received */
	while ( !(UCSR0A & (1<<RXC0)) );
 116:	5f 9b       	sbis	0x0b, 7	; 11
 118:	fe cf       	rjmp	.-4      	; 0x116 <USART_Receive>

	/* Get and return received data from buffer */
	return UDR0;
 11a:	8c b1       	in	r24, 0x0c	; 12
}
 11c:	99 27       	eor	r25, r25
 11e:	08 95       	ret

00000120 <cbWrite>:

/******** BUFFER FUNC ******************************/
void cbWrite(ptr_object *cb, unsigned char *_byte) {
 120:	cf 93       	push	r28
 122:	df 93       	push	r29
 124:	ec 01       	movw	r28, r24
 126:	db 01       	movw	r26, r22
	//if(cbIsFull(cb)) return;
    cb->value[cb->end] = *_byte;
 128:	ea 81       	ldd	r30, Y+2	; 0x02
 12a:	fb 81       	ldd	r31, Y+3	; 0x03
 12c:	8d 81       	ldd	r24, Y+5	; 0x05
 12e:	9e 81       	ldd	r25, Y+6	; 0x06
 130:	e8 0f       	add	r30, r24
 132:	f9 1f       	adc	r31, r25
 134:	8c 91       	ld	r24, X
 136:	80 83       	st	Z, r24
    cb->end = (cb->end + 1) % cb->size;
 138:	2a 81       	ldd	r18, Y+2	; 0x02
 13a:	3b 81       	ldd	r19, Y+3	; 0x03
 13c:	8c 81       	ldd	r24, Y+4	; 0x04
 13e:	e8 2f       	mov	r30, r24
 140:	ff 27       	eor	r31, r31
 142:	c9 01       	movw	r24, r18
 144:	01 96       	adiw	r24, 0x01	; 1
 146:	bf 01       	movw	r22, r30
 148:	0e 94 a2 02 	call	0x544 <__divmodhi4>
 14c:	9c 01       	movw	r18, r24
 14e:	9b 83       	std	Y+3, r25	; 0x03
 150:	8a 83       	std	Y+2, r24	; 0x02
    if (cb->end == cb->start)
 152:	88 81       	ld	r24, Y
 154:	99 81       	ldd	r25, Y+1	; 0x01
 156:	28 17       	cp	r18, r24
 158:	39 07       	cpc	r19, r25
 15a:	39 f4       	brne	.+14     	; 0x16a <cbWrite+0x4a>
        cb->start = (cb->start + 1) % cb->size; /* full, overwrite */
 15c:	c9 01       	movw	r24, r18
 15e:	01 96       	adiw	r24, 0x01	; 1
 160:	bf 01       	movw	r22, r30
 162:	0e 94 a2 02 	call	0x544 <__divmodhi4>
 166:	99 83       	std	Y+1, r25	; 0x01
 168:	88 83       	st	Y, r24
 16a:	df 91       	pop	r29
 16c:	cf 91       	pop	r28
 16e:	08 95       	ret

00000170 <cbIsFull>:
}

unsigned char cbRead(ptr_object *cb){
	unsigned char *tmp;
	*tmp = cb->value[cb->start];
    cb->start = (cb->start + 1) % cb->size;

	return tmp;
}

unsigned char cbIsFull(ptr_object *cb) {
 170:	cf 93       	push	r28
 172:	df 93       	push	r29
 174:	fc 01       	movw	r30, r24
    return (cb->end + 1) % cb->size == cb->start; }
 176:	c0 e0       	ldi	r28, 0x00	; 0
 178:	d0 e0       	ldi	r29, 0x00	; 0
 17a:	42 81       	ldd	r20, Z+2	; 0x02
 17c:	53 81       	ldd	r21, Z+3	; 0x03
 17e:	84 81       	ldd	r24, Z+4	; 0x04
 180:	28 2f       	mov	r18, r24
 182:	33 27       	eor	r19, r19
 184:	ca 01       	movw	r24, r20
 186:	01 96       	adiw	r24, 0x01	; 1
 188:	b9 01       	movw	r22, r18
 18a:	0e 94 a2 02 	call	0x544 <__divmodhi4>
 18e:	20 81       	ld	r18, Z
 190:	31 81       	ldd	r19, Z+1	; 0x01
 192:	82 17       	cp	r24, r18
 194:	93 07       	cpc	r25, r19
 196:	11 f4       	brne	.+4      	; 0x19c <cbIsFull+0x2c>
 198:	c1 e0       	ldi	r28, 0x01	; 1
 19a:	d0 e0       	ldi	r29, 0x00	; 0
 19c:	ce 01       	movw	r24, r28
 19e:	df 91       	pop	r29
 1a0:	cf 91       	pop	r28
 1a2:	08 95       	ret

000001a4 <USART_Transmit>:
 1a4:	5d 9b       	sbis	0x0b, 5	; 11
 1a6:	fe cf       	rjmp	.-4      	; 0x1a4 <USART_Transmit>
 1a8:	8c b9       	out	0x0c, r24	; 12
 1aa:	08 95       	ret

000001ac <cbIsEmpty>:

unsigned char cbIsEmpty(ptr_object *cb){
 1ac:	fc 01       	movw	r30, r24
	return cb->end == cb->start;
 1ae:	40 e0       	ldi	r20, 0x00	; 0
 1b0:	50 e0       	ldi	r21, 0x00	; 0
 1b2:	22 81       	ldd	r18, Z+2	; 0x02
 1b4:	33 81       	ldd	r19, Z+3	; 0x03
 1b6:	80 81       	ld	r24, Z
 1b8:	91 81       	ldd	r25, Z+1	; 0x01
 1ba:	28 17       	cp	r18, r24
 1bc:	39 07       	cpc	r19, r25
 1be:	11 f4       	brne	.+4      	; 0x1c4 <cbIsEmpty+0x18>
 1c0:	41 e0       	ldi	r20, 0x01	; 1
 1c2:	50 e0       	ldi	r21, 0x00	; 0
}
 1c4:	ca 01       	movw	r24, r20
 1c6:	08 95       	ret

000001c8 <__vector_18>:
 1c8:	1f 92       	push	r1
 1ca:	0f 92       	push	r0
 1cc:	0f b6       	in	r0, 0x3f	; 63
 1ce:	0f 92       	push	r0
 1d0:	11 24       	eor	r1, r1
 1d2:	2f 93       	push	r18
 1d4:	3f 93       	push	r19
 1d6:	4f 93       	push	r20
 1d8:	5f 93       	push	r21
 1da:	6f 93       	push	r22
 1dc:	7f 93       	push	r23
 1de:	8f 93       	push	r24
 1e0:	9f 93       	push	r25
 1e2:	af 93       	push	r26
 1e4:	bf 93       	push	r27
 1e6:	cf 93       	push	r28
 1e8:	df 93       	push	r29
 1ea:	ef 93       	push	r30
 1ec:	ff 93       	push	r31
 1ee:	0e 94 8b 00 	call	0x116 <USART_Receive>
 1f2:	88 83       	st	Y, r24
 1f4:	be 01       	movw	r22, r28
 1f6:	8c e2       	ldi	r24, 0x2C	; 44
 1f8:	91 e0       	ldi	r25, 0x01	; 1
 1fa:	0e 94 90 00 	call	0x120 <cbWrite>
 1fe:	8c e2       	ldi	r24, 0x2C	; 44
 200:	91 e0       	ldi	r25, 0x01	; 1
 202:	0e 94 b8 00 	call	0x170 <cbIsFull>
 206:	81 30       	cpi	r24, 0x01	; 1
 208:	89 f5       	brne	.+98     	; 0x26c <__vector_18+0xa4>
 20a:	80 91 31 01 	lds	r24, 0x0131
 20e:	90 91 32 01 	lds	r25, 0x0132
 212:	0e 94 4e 02 	call	0x49c <atoi>
 216:	90 93 01 01 	sts	0x0101, r25
 21a:	80 93 00 01 	sts	0x0100, r24
 21e:	e0 91 31 01 	lds	r30, 0x0131
 222:	f0 91 32 01 	lds	r31, 0x0132
 226:	80 81       	ld	r24, Z
 228:	0e 94 d2 00 	call	0x1a4 <USART_Transmit>
 22c:	80 91 31 01 	lds	r24, 0x0131
 230:	90 91 32 01 	lds	r25, 0x0132
 234:	01 96       	adiw	r24, 0x01	; 1
 236:	90 93 32 01 	sts	0x0132, r25
 23a:	80 93 31 01 	sts	0x0131, r24
 23e:	40 91 2c 01 	lds	r20, 0x012C
 242:	50 91 2d 01 	lds	r21, 0x012D
 246:	80 91 30 01 	lds	r24, 0x0130
 24a:	28 2f       	mov	r18, r24
 24c:	33 27       	eor	r19, r19
 24e:	ca 01       	movw	r24, r20
 250:	01 96       	adiw	r24, 0x01	; 1
 252:	b9 01       	movw	r22, r18
 254:	0e 94 a2 02 	call	0x544 <__divmodhi4>
 258:	90 93 2d 01 	sts	0x012D, r25
 25c:	80 93 2c 01 	sts	0x012C, r24
 260:	8c e2       	ldi	r24, 0x2C	; 44
 262:	91 e0       	ldi	r25, 0x01	; 1
 264:	0e 94 d6 00 	call	0x1ac <cbIsEmpty>
 268:	88 23       	and	r24, r24
 26a:	c9 f2       	breq	.-78     	; 0x21e <__vector_18+0x56>
 26c:	81 e0       	ldi	r24, 0x01	; 1
 26e:	80 93 02 01 	sts	0x0102, r24
 272:	ff 91       	pop	r31
 274:	ef 91       	pop	r30
 276:	df 91       	pop	r29
 278:	cf 91       	pop	r28
 27a:	bf 91       	pop	r27
 27c:	af 91       	pop	r26
 27e:	9f 91       	pop	r25
 280:	8f 91       	pop	r24
 282:	7f 91       	pop	r23
 284:	6f 91       	pop	r22
 286:	5f 91       	pop	r21
 288:	4f 91       	pop	r20
 28a:	3f 91       	pop	r19
 28c:	2f 91       	pop	r18
 28e:	0f 90       	pop	r0
 290:	0f be       	out	0x3f, r0	; 63
 292:	0f 90       	pop	r0
 294:	1f 90       	pop	r1
 296:	18 95       	reti

00000298 <_strlen>:

/****** WIDE RANGE FUNCTIONS ******************************************/
/******** STRING LENGTH ******************************/
unsigned char _strlen(unsigned char *string){ 
 298:	dc 01       	movw	r26, r24
	unsigned char length = 0;
 29a:	90 e0       	ldi	r25, 0x00	; 0
	while(*(string+length)) length++;
 29c:	8c 91       	ld	r24, X
 29e:	88 23       	and	r24, r24
 2a0:	31 f0       	breq	.+12     	; 0x2ae <_strlen+0x16>
 2a2:	9f 5f       	subi	r25, 0xFF	; 255
 2a4:	fd 01       	movw	r30, r26
 2a6:	e9 0f       	add	r30, r25
 2a8:	f1 1d       	adc	r31, r1
 2aa:	80 81       	ld	r24, Z
 2ac:	f8 cf       	rjmp	.-16     	; 0x29e <_strlen+0x6>
	return length;
}
 2ae:	89 2f       	mov	r24, r25
 2b0:	99 27       	eor	r25, r25
 2b2:	08 95       	ret

000002b4 <__vector_19>:
 2b4:	1f 92       	push	r1
 2b6:	0f 92       	push	r0
 2b8:	0f b6       	in	r0, 0x3f	; 63
 2ba:	0f 92       	push	r0
 2bc:	11 24       	eor	r1, r1
 2be:	1f 93       	push	r17
 2c0:	2f 93       	push	r18
 2c2:	3f 93       	push	r19
 2c4:	4f 93       	push	r20
 2c6:	5f 93       	push	r21
 2c8:	6f 93       	push	r22
 2ca:	7f 93       	push	r23
 2cc:	8f 93       	push	r24
 2ce:	9f 93       	push	r25
 2d0:	af 93       	push	r26
 2d2:	bf 93       	push	r27
 2d4:	ef 93       	push	r30
 2d6:	ff 93       	push	r31
 2d8:	cf 93       	push	r28
 2da:	df 93       	push	r29
 2dc:	cd b7       	in	r28, 0x3d	; 61
 2de:	de b7       	in	r29, 0x3e	; 62
 2e0:	27 97       	sbiw	r28, 0x07	; 7
 2e2:	de bf       	out	0x3e, r29	; 62
 2e4:	cd bf       	out	0x3d, r28	; 61
 2e6:	80 91 02 01 	lds	r24, 0x0102
 2ea:	81 30       	cpi	r24, 0x01	; 1
 2ec:	f9 f4       	brne	.+62     	; 0x32c <__vector_19+0x78>
 2ee:	83 e0       	ldi	r24, 0x03	; 3
 2f0:	91 e0       	ldi	r25, 0x01	; 1
 2f2:	9f 83       	std	Y+7, r25	; 0x07
 2f4:	8e 83       	std	Y+6, r24	; 0x06
 2f6:	0e 94 4c 01 	call	0x298 <_strlen>
 2fa:	8d 83       	std	Y+5, r24	; 0x05
 2fc:	ee 81       	ldd	r30, Y+6	; 0x06
 2fe:	ff 81       	ldd	r31, Y+7	; 0x07
 300:	80 81       	ld	r24, Z
 302:	0e 94 d2 00 	call	0x1a4 <USART_Transmit>
 306:	1d 81       	ldd	r17, Y+5	; 0x05
 308:	11 50       	subi	r17, 0x01	; 1
 30a:	1d 83       	std	Y+5, r17	; 0x05
 30c:	8e 81       	ldd	r24, Y+6	; 0x06
 30e:	9f 81       	ldd	r25, Y+7	; 0x07
 310:	01 96       	adiw	r24, 0x01	; 1
 312:	9f 83       	std	Y+7, r25	; 0x07
 314:	8e 83       	std	Y+6, r24	; 0x06
 316:	11 23       	and	r17, r17
 318:	89 f7       	brne	.-30     	; 0x2fc <__vector_19+0x48>
 31a:	84 e2       	ldi	r24, 0x24	; 36
 31c:	91 e0       	ldi	r25, 0x01	; 1
 31e:	9f 83       	std	Y+7, r25	; 0x07
 320:	8e 83       	std	Y+6, r24	; 0x06
 322:	0e 94 4c 01 	call	0x298 <_strlen>
 326:	8d 83       	std	Y+5, r24	; 0x05
 328:	10 93 02 01 	sts	0x0102, r17
 32c:	27 96       	adiw	r28, 0x07	; 7
 32e:	f8 94       	cli
 330:	de bf       	out	0x3e, r29	; 62
 332:	cd bf       	out	0x3d, r28	; 61
 334:	df 91       	pop	r29
 336:	cf 91       	pop	r28
 338:	ff 91       	pop	r31
 33a:	ef 91       	pop	r30
 33c:	bf 91       	pop	r27
 33e:	af 91       	pop	r26
 340:	9f 91       	pop	r25
 342:	8f 91       	pop	r24
 344:	7f 91       	pop	r23
 346:	6f 91       	pop	r22
 348:	5f 91       	pop	r21
 34a:	4f 91       	pop	r20
 34c:	3f 91       	pop	r19
 34e:	2f 91       	pop	r18
 350:	1f 91       	pop	r17
 352:	0f 90       	pop	r0
 354:	0f be       	out	0x3f, r0	; 63
 356:	0f 90       	pop	r0
 358:	1f 90       	pop	r1
 35a:	18 95       	reti

0000035c <_rotl>:

/******** CIRCULAR SHIFT *****************************/
unsigned char _rotl(const unsigned char value, unsigned char shift) {
    if ((shift &= sizeof(value)*8 - 1) == 0) return value;
 35c:	67 70       	andi	r22, 0x07	; 7
 35e:	e8 2f       	mov	r30, r24
 360:	ff 27       	eor	r31, r31
 362:	66 23       	and	r22, r22
 364:	11 f4       	brne	.+4      	; 0x36a <_rotl+0xe>
 366:	cf 01       	movw	r24, r30
 368:	08 95       	ret
    return (value << shift) | (value >> (sizeof(value)*8 - shift));
 36a:	26 2f       	mov	r18, r22
 36c:	33 27       	eor	r19, r19
 36e:	af 01       	movw	r20, r30
 370:	02 2e       	mov	r0, r18
 372:	02 c0       	rjmp	.+4      	; 0x378 <_rotl+0x1c>
 374:	44 0f       	add	r20, r20
 376:	55 1f       	adc	r21, r21
 378:	0a 94       	dec	r0
 37a:	e2 f7       	brpl	.-8      	; 0x374 <_rotl+0x18>
 37c:	88 e0       	ldi	r24, 0x08	; 8
 37e:	90 e0       	ldi	r25, 0x00	; 0
 380:	82 1b       	sub	r24, r18
 382:	93 0b       	sbc	r25, r19
 384:	02 c0       	rjmp	.+4      	; 0x38a <_rotl+0x2e>
 386:	f5 95       	asr	r31
 388:	e7 95       	ror	r30
 38a:	8a 95       	dec	r24
 38c:	e2 f7       	brpl	.-8      	; 0x386 <_rotl+0x2a>
 38e:	84 2f       	mov	r24, r20
 390:	8e 2b       	or	r24, r30
 392:	99 27       	eor	r25, r25
    //return (value >> shift) | (value << (sizeof(value)*8 - shift)); //right
} 
 394:	08 95       	ret

00000396 <port_init>:
 396:	8f ef       	ldi	r24, 0xFF	; 255
 398:	81 bb       	out	0x11, r24	; 17
 39a:	82 bb       	out	0x12, r24	; 18
 39c:	78 94       	sei
 39e:	08 95       	ret

000003a0 <USART_Init>:
 3a0:	9c 01       	movw	r18, r24
 3a2:	83 2f       	mov	r24, r19
 3a4:	99 27       	eor	r25, r25
 3a6:	80 93 90 00 	sts	0x0090, r24
 3aa:	29 b9       	out	0x09, r18	; 9
 3ac:	88 eb       	ldi	r24, 0xB8	; 184
 3ae:	8a b9       	out	0x0a, r24	; 10
 3b0:	8e e0       	ldi	r24, 0x0E	; 14
 3b2:	80 93 95 00 	sts	0x0095, r24
 3b6:	83 e0       	ldi	r24, 0x03	; 3
 3b8:	80 93 30 01 	sts	0x0130, r24
 3bc:	10 92 2d 01 	sts	0x012D, r1
 3c0:	10 92 2c 01 	sts	0x012C, r1
 3c4:	10 92 2f 01 	sts	0x012F, r1
 3c8:	10 92 2e 01 	sts	0x012E, r1
 3cc:	08 95       	ret

000003ce <init_devices>:
 3ce:	85 e0       	ldi	r24, 0x05	; 5
 3d0:	83 bf       	out	0x33, r24	; 51
 3d2:	81 e0       	ldi	r24, 0x01	; 1
 3d4:	87 bf       	out	0x37, r24	; 55
 3d6:	12 be       	out	0x32, r1	; 50
 3d8:	8f e5       	ldi	r24, 0x5F	; 95
 3da:	90 e0       	ldi	r25, 0x00	; 0
 3dc:	0e 94 d0 01 	call	0x3a0 <USART_Init>
 3e0:	0e 94 cb 01 	call	0x396 <port_init>
 3e4:	08 95       	ret

000003e6 <main>:
 3e6:	cf ef       	ldi	r28, 0xFF	; 255
 3e8:	d0 e1       	ldi	r29, 0x10	; 16
 3ea:	de bf       	out	0x3e, r29	; 62
 3ec:	cd bf       	out	0x3d, r28	; 61
 3ee:	0e 94 e7 01 	call	0x3ce <init_devices>
 3f2:	c0 e8       	ldi	r28, 0x80	; 128
 3f4:	80 91 00 01 	lds	r24, 0x0100
 3f8:	90 91 01 01 	lds	r25, 0x0101
 3fc:	aa 27       	eor	r26, r26
 3fe:	bb 27       	eor	r27, r27
 400:	bc 01       	movw	r22, r24
 402:	cd 01       	movw	r24, r26
 404:	20 e0       	ldi	r18, 0x00	; 0
 406:	30 e0       	ldi	r19, 0x00	; 0
 408:	41 ee       	ldi	r20, 0xE1	; 225
 40a:	50 e0       	ldi	r21, 0x00	; 0
 40c:	0e 94 83 02 	call	0x506 <__mulsi3>
 410:	9b 01       	movw	r18, r22
 412:	ac 01       	movw	r20, r24
 414:	80 91 28 01 	lds	r24, 0x0128
 418:	90 91 29 01 	lds	r25, 0x0129
 41c:	a0 91 2a 01 	lds	r26, 0x012A
 420:	b0 91 2b 01 	lds	r27, 0x012B
 424:	28 17       	cp	r18, r24
 426:	39 07       	cpc	r19, r25
 428:	4a 07       	cpc	r20, r26
 42a:	5b 07       	cpc	r21, r27
 42c:	18 f7       	brcc	.-58     	; 0x3f4 <main+0xe>
 42e:	61 e0       	ldi	r22, 0x01	; 1
 430:	8c 2f       	mov	r24, r28
 432:	0e 94 ae 01 	call	0x35c <_rotl>
 436:	c8 2f       	mov	r28, r24
 438:	80 95       	com	r24
 43a:	82 bb       	out	0x12, r24	; 18
 43c:	10 92 28 01 	sts	0x0128, r1
 440:	10 92 29 01 	sts	0x0129, r1
 444:	10 92 2a 01 	sts	0x012A, r1
 448:	10 92 2b 01 	sts	0x012B, r1
 44c:	d3 cf       	rjmp	.-90     	; 0x3f4 <main+0xe>

0000044e <COP_init>:
 44e:	8e e1       	ldi	r24, 0x1E	; 30
 450:	81 bd       	out	0x21, r24	; 33
 452:	8e e0       	ldi	r24, 0x0E	; 14
 454:	81 bd       	out	0x21, r24	; 33
 456:	08 95       	ret

00000458 <cbRead>:
 458:	0f 93       	push	r16
 45a:	1f 93       	push	r17
 45c:	cf 93       	push	r28
 45e:	df 93       	push	r29
 460:	dc 01       	movw	r26, r24
 462:	ed 91       	ld	r30, X+
 464:	fc 91       	ld	r31, X
 466:	ec 01       	movw	r28, r24
 468:	8d 81       	ldd	r24, Y+5	; 0x05
 46a:	9e 81       	ldd	r25, Y+6	; 0x06
 46c:	e8 0f       	add	r30, r24
 46e:	f9 1f       	adc	r31, r25
 470:	80 81       	ld	r24, Z
 472:	f8 01       	movw	r30, r16
 474:	80 83       	st	Z, r24
 476:	68 81       	ld	r22, Y
 478:	79 81       	ldd	r23, Y+1	; 0x01
 47a:	8c 81       	ldd	r24, Y+4	; 0x04
 47c:	48 2f       	mov	r20, r24
 47e:	55 27       	eor	r21, r21
 480:	cb 01       	movw	r24, r22
 482:	01 96       	adiw	r24, 0x01	; 1
 484:	ba 01       	movw	r22, r20
 486:	0e 94 a2 02 	call	0x544 <__divmodhi4>
 48a:	99 83       	std	Y+1, r25	; 0x01
 48c:	88 83       	st	Y, r24
 48e:	80 2f       	mov	r24, r16
 490:	99 27       	eor	r25, r25
 492:	df 91       	pop	r29
 494:	cf 91       	pop	r28
 496:	1f 91       	pop	r17
 498:	0f 91       	pop	r16
 49a:	08 95       	ret

0000049c <atoi>:
 49c:	fc 01       	movw	r30, r24
 49e:	88 27       	eor	r24, r24
 4a0:	99 27       	eor	r25, r25
 4a2:	e8 94       	clt
 4a4:	21 91       	ld	r18, Z+
 4a6:	22 23       	and	r18, r18
 4a8:	f1 f0       	breq	.+60     	; 0x4e6 <atoi+0x4a>
 4aa:	20 32       	cpi	r18, 0x20	; 32
 4ac:	d9 f3       	breq	.-10     	; 0x4a4 <atoi+0x8>
 4ae:	29 30       	cpi	r18, 0x09	; 9
 4b0:	c9 f3       	breq	.-14     	; 0x4a4 <atoi+0x8>
 4b2:	2a 30       	cpi	r18, 0x0A	; 10
 4b4:	b9 f3       	breq	.-18     	; 0x4a4 <atoi+0x8>
 4b6:	2c 30       	cpi	r18, 0x0C	; 12
 4b8:	a9 f3       	breq	.-22     	; 0x4a4 <atoi+0x8>
 4ba:	2d 30       	cpi	r18, 0x0D	; 13
 4bc:	99 f3       	breq	.-26     	; 0x4a4 <atoi+0x8>
 4be:	26 37       	cpi	r18, 0x76	; 118
 4c0:	89 f3       	breq	.-30     	; 0x4a4 <atoi+0x8>
 4c2:	2b 32       	cpi	r18, 0x2B	; 43
 4c4:	19 f0       	breq	.+6      	; 0x4cc <atoi+0x30>
 4c6:	2d 32       	cpi	r18, 0x2D	; 45
 4c8:	21 f4       	brne	.+8      	; 0x4d2 <atoi+0x36>
 4ca:	68 94       	set
 4cc:	21 91       	ld	r18, Z+
 4ce:	22 23       	and	r18, r18
 4d0:	51 f0       	breq	.+20     	; 0x4e6 <atoi+0x4a>
 4d2:	20 33       	cpi	r18, 0x30	; 48
 4d4:	44 f0       	brlt	.+16     	; 0x4e6 <atoi+0x4a>
 4d6:	2a 33       	cpi	r18, 0x3A	; 58
 4d8:	34 f4       	brge	.+12     	; 0x4e6 <atoi+0x4a>
 4da:	20 53       	subi	r18, 0x30	; 48
 4dc:	0e 94 7b 02 	call	0x4f6 <__mulhi_const_10>
 4e0:	82 0f       	add	r24, r18
 4e2:	91 1d       	adc	r25, r1
 4e4:	f3 cf       	rjmp	.-26     	; 0x4cc <atoi+0x30>
 4e6:	81 15       	cp	r24, r1
 4e8:	91 05       	cpc	r25, r1
 4ea:	21 f0       	breq	.+8      	; 0x4f4 <atoi+0x58>
 4ec:	1e f4       	brtc	.+6      	; 0x4f4 <atoi+0x58>
 4ee:	80 95       	com	r24
 4f0:	90 95       	com	r25
 4f2:	01 96       	adiw	r24, 0x01	; 1
 4f4:	08 95       	ret

000004f6 <__mulhi_const_10>:
 4f6:	7a e0       	ldi	r23, 0x0A	; 10
 4f8:	97 9f       	mul	r25, r23
 4fa:	90 2d       	mov	r25, r0
 4fc:	87 9f       	mul	r24, r23
 4fe:	80 2d       	mov	r24, r0
 500:	91 0d       	add	r25, r1
 502:	11 24       	eor	r1, r1
 504:	08 95       	ret

00000506 <__mulsi3>:
 506:	62 9f       	mul	r22, r18
 508:	d0 01       	movw	r26, r0
 50a:	73 9f       	mul	r23, r19
 50c:	f0 01       	movw	r30, r0
 50e:	82 9f       	mul	r24, r18
 510:	e0 0d       	add	r30, r0
 512:	f1 1d       	adc	r31, r1
 514:	64 9f       	mul	r22, r20
 516:	e0 0d       	add	r30, r0
 518:	f1 1d       	adc	r31, r1
 51a:	92 9f       	mul	r25, r18
 51c:	f0 0d       	add	r31, r0
 51e:	83 9f       	mul	r24, r19
 520:	f0 0d       	add	r31, r0
 522:	74 9f       	mul	r23, r20
 524:	f0 0d       	add	r31, r0
 526:	65 9f       	mul	r22, r21
 528:	f0 0d       	add	r31, r0
 52a:	99 27       	eor	r25, r25
 52c:	72 9f       	mul	r23, r18
 52e:	b0 0d       	add	r27, r0
 530:	e1 1d       	adc	r30, r1
 532:	f9 1f       	adc	r31, r25
 534:	63 9f       	mul	r22, r19
 536:	b0 0d       	add	r27, r0
 538:	e1 1d       	adc	r30, r1
 53a:	f9 1f       	adc	r31, r25
 53c:	bd 01       	movw	r22, r26
 53e:	cf 01       	movw	r24, r30
 540:	11 24       	eor	r1, r1
 542:	08 95       	ret

00000544 <__divmodhi4>:
 544:	97 fb       	bst	r25, 7
 546:	09 2e       	mov	r0, r25
 548:	07 26       	eor	r0, r23
 54a:	0a d0       	rcall	.+20     	; 0x560 <__divmodhi4_neg1>
 54c:	77 fd       	sbrc	r23, 7
 54e:	04 d0       	rcall	.+8      	; 0x558 <__divmodhi4_neg2>
 550:	0c d0       	rcall	.+24     	; 0x56a <__udivmodhi4>
 552:	06 d0       	rcall	.+12     	; 0x560 <__divmodhi4_neg1>
 554:	00 20       	and	r0, r0
 556:	1a f4       	brpl	.+6      	; 0x55e <__divmodhi4_exit>

00000558 <__divmodhi4_neg2>:
 558:	70 95       	com	r23
 55a:	61 95       	neg	r22
 55c:	7f 4f       	sbci	r23, 0xFF	; 255

0000055e <__divmodhi4_exit>:
 55e:	08 95       	ret

00000560 <__divmodhi4_neg1>:
 560:	f6 f7       	brtc	.-4      	; 0x55e <__divmodhi4_exit>
 562:	90 95       	com	r25
 564:	81 95       	neg	r24
 566:	9f 4f       	sbci	r25, 0xFF	; 255
 568:	08 95       	ret

0000056a <__udivmodhi4>:
 56a:	aa 1b       	sub	r26, r26
 56c:	bb 1b       	sub	r27, r27
 56e:	51 e1       	ldi	r21, 0x11	; 17
 570:	07 c0       	rjmp	.+14     	; 0x580 <__udivmodhi4_ep>

00000572 <__udivmodhi4_loop>:
 572:	aa 1f       	adc	r26, r26
 574:	bb 1f       	adc	r27, r27
 576:	a6 17       	cp	r26, r22
 578:	b7 07       	cpc	r27, r23
 57a:	10 f0       	brcs	.+4      	; 0x580 <__udivmodhi4_ep>
 57c:	a6 1b       	sub	r26, r22
 57e:	b7 0b       	sbc	r27, r23

00000580 <__udivmodhi4_ep>:
 580:	88 1f       	adc	r24, r24
 582:	99 1f       	adc	r25, r25
 584:	5a 95       	dec	r21
 586:	a9 f7       	brne	.-22     	; 0x572 <__udivmodhi4_loop>
 588:	80 95       	com	r24
 58a:	90 95       	com	r25
 58c:	bc 01       	movw	r22, r24
 58e:	cd 01       	movw	r24, r26
 590:	08 95       	ret
